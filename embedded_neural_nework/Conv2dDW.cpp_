#include <Conv2dDW.h>



template<   unsigned int kernel_size,
            class io_data_type, 
            class acc_data_type>
void Conv2dDW_kernel(   io_data_type *output_buffer, 
                        io_data_type *input_buffer, 
                        const io_data_type *bias_buffer,
                        const io_data_type *kernel, 
                        int32_t       scale,

                        unsigned int input_channels,
                        unsigned int height, 
                        unsigned int width,
                        unsigned int stride)
{
    unsigned int k_half         = (kernel_size - 1)/2;
    unsigned int input_size_y   = height    - 2*k_half;
    unsigned int input_size_x   = width     - 2*k_half;
    
    for (unsigned int filter = 0; filter < input_channels; filter++)
    {
        unsigned int kernel_idx = filter*kernel_size*kernel_size;
        const io_data_type *kernel_ =  &(kernel[kernel_idx]);
        
        for (unsigned int y = 0; y < input_size_y-stride/2; y+= stride)
            for (unsigned int x = 0; x < input_size_x-stride/2; x+= stride)
            {
                unsigned int input_idx      = (filter*height + y)*width + x;  
                const io_data_type *input_  =  &(input_buffer[input_idx]);
   
                int32_t result = 0; 

                result+= (acc_data_type)kernel_[0]*(acc_data_type)input_[0 + 0*width];
                result+= (acc_data_type)kernel_[1]*(acc_data_type)input_[1 + 0*width];
                result+= (acc_data_type)kernel_[2]*(acc_data_type)input_[2 + 0*width];
                    
                result+= (acc_data_type)kernel_[3]*(acc_data_type)input_[0 + 1*width];
                result+= (acc_data_type)kernel_[4]*(acc_data_type)input_[1 + 1*width];
                result+= (acc_data_type)kernel_[5]*(acc_data_type)input_[2 + 1*width];
                    
                result+= (acc_data_type)kernel_[6]*(acc_data_type)input_[0 + 2*width];
                result+= (acc_data_type)kernel_[7]*(acc_data_type)input_[1 + 2*width];
                result+= (acc_data_type)kernel_[8]*(acc_data_type)input_[2 + 2*width];
                
                result = ((result + bias_buffer[kernel_idx])*scale)/(128*128);
               
                if (result > 127) 
                    result = 127;
                
                if (result < -127)
                    result = -127;
 
                unsigned int x_output = x/stride + k_half - stride/2;
                unsigned int y_output = y/stride + k_half - stride/2;

                unsigned int output_idx     = ((y_output)*(width/stride) + x_output)*input_channels + filter;
                output_buffer[output_idx]   = result; 
            }
    }
}


void Conv2dDW(  int8_t *output_buffer, 
                int8_t *input_buffer, 
                const int8_t *bias_buffer,
                const int8_t *kernel, 
                int32_t scale,

                unsigned int input_channels,
                unsigned int height, 
                unsigned int width,
                unsigned int stride)
{
    Conv2dDW_kernel<3, int8_t, int16_t>(    output_buffer, 
                                            input_buffer, 
                                            bias_buffer,
                                            kernel, 
                                            scale,

                                            input_channels,
                                            height, 
                                            width,

                                            stride);
       
}